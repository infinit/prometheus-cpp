import drake
import drake.cmake
import drake.cxx
import drake.git
import os

prometheus_libs = None
sources = None
config = None

def configure(
    cxx_toolkit,
    cxx_config,
    protoc,
    protobuf_config,
    protobuf_lib,
    cmake_vars = {},
    curl_include_dir = None,
    curl_library = None,
    zlib_include_dir = None,
    zlib_library = None,
):
  global prometheus_libs, sources
  prometheus_libs = [drake.cxx.DynLib(p, tk = cxx_toolkit) for p in [
    'core/prometheus-cpp-core',
    'pull/prometheus-cpp-pull',
  ]]
  # Prometheus git repo.
  git = drake.git.Git()
  # The files we depend upon.
  files = git.ls_files('include', 'lib', 'CMakeLists.txt')
  print(zlib_library)
  srcs = [protoc, protobuf_lib, curl_library, zlib_library] + drake.nodes(*files)

  # Makefile target to run.
  targets = [
    'all',
  ]

  class PrometheusCMakeBuilder(drake.cmake.CMakeBuilder):

    def execute(self):
      if not super().execute():
        return False
      for l in prometheus_libs:
        self.cmd(
          'Fix rpath for {}'.format(l),
          cxx_toolkit.rpath_set_command(l, '.'))
        drake.cxx.set_lib_id(l.path())
      return True

  cmake_vars.update({
    'BUILD_SHARED_LIBS': 'ON',
    'PROTOBUF_INCLUDE_DIR': protobuf_config.protobuf_include_dir,
    'PROTOBUF_LIBRARY': protobuf_lib.path(absolute = True),
    'PROTOBUF_PROTOC_EXECUTABLE': protoc.path(absolute = True),
    # CivetWeb, a small HTTP in C and C++, is used an a "object"
    # library (aka "convenience library" in Libtool parlance) in
    # libprometheus-cpp.  But compiling the latter as a shared library
    # does not make the former PIC.  So force -fPIC.
    # https://cmake.org/pipermail/cmake/2012-June/050941.html
    'CURL_INCLUDE_DIR': str(curl_include_dir),
    'CURL_LIBRARY': str(curl_library.path(absolute = True)),
    'ZLIB_INCLUDE_DIR': str(zlib_include_dir),
    'ZLIB_LIBRARY': str(zlib_library.path(absolute = True)),
    'CMAKE_C_FLAGS': '-fPIC',
    'CMAKE_CXX_FLAGS': (('-stdlib=libc++' if cxx_toolkit.os == drake.os.macos else '')
                        + ' -fPIC'),
    })
  if drake.path_source().absolute():
    cmake_source = drake.path_source() / drake.Drake.current.prefix
  else:
    cmake_source = drake.node('CMakeLists.txt').path(absolute = True).dirname()
  cmake = PrometheusCMakeBuilder(cxx_toolkit, srcs, prometheus_libs, cmake_vars,
                                 targets = targets,
                                 path_to_cmake_source = cmake_source)
  global config
  config = drake.cxx.Config(cxx_config)
  config += protobuf_config
  # libprometheus-cpp's header.
  config.add_local_include_path('core/include')
  config.add_local_include_path('pull/include')
  # prometheus_client_model, a submodule, that contains the protobuf
  # support: metrics.pb.h.
  config.add_local_include_path('lib/cpp')

# Local Variables:
# mode: python
# End:
