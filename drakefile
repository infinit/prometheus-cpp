import drake
import drake.cmake
import drake.cxx
import drake.git
import os

# The path to the libprometheus-cpp library.
prometheus_lib = None
sources = None
cxx_config = None

def configure(
    cxx_toolkit,
    in_cxx_config,
    protoc,
    protobuf_config,
    protobuf_lib,
    cmake_vars = {}
):
  global prometheus_lib, sources
  prometheus_lib = drake.cxx.DynLib('lib/prometheus-cpp', tk = cxx_toolkit)
  # Prometheus git repo.
  git = drake.git.Git()
  # The files we depend upon.
  files = git.ls_files('include', 'lib', 'CMakeLists.txt')
  srcs = [protoc, protobuf_lib] + drake.nodes(*files)

  dsts = [prometheus_lib] + drake.nodes(
    'lib/cpp/metrics.pb.h'
    )

  # Makefile target to run.
  targets = [
    'prometheus-cpp',
  ]

  class PrometheusCMakeBuilder(drake.cmake.CMakeBuilder):

    def execute(self):
      if not super().execute():
        return False
      self.cmd(
        'Fix rpath for {}'.format(prometheus_lib),
        cxx_toolkit.rpath_set_command(prometheus_lib, '.'))
      drake.cxx.set_lib_id(prometheus_lib.path())
      return True

  cmake_vars.update({
    'BUILD_SHARED_LIBS': 'ON',
    'PROTOBUF_INCLUDE_DIR': protobuf_config.protobuf_include_dir,
    'PROTOBUF_LIBRARY': protobuf_lib.path(absolute = True),
    'PROTOBUF_PROTOC_EXECUTABLE': protoc.path(absolute = True),
    # CivetWeb, a small HTTP in C and C++, is used an a "object"
    # library (aka "convenience library" in Libtool parlance) in
    # libprometheus-cpp.  But compiling the latter as a shared library
    # does not make the former PIC.  So force -fPIC.
    # https://cmake.org/pipermail/cmake/2012-June/050941.html
    'CMAKE_C_FLAGS': '-fPIC' ,
    'CMAKE_CXX_FLAGS': (('-stdlib=libc++' if cxx_toolkit.os == drake.os.macos else '')
                        + ' -fPIC'),
    })
  if drake.path_source().absolute():
    cmake_source = drake.path_source() / drake.Drake.current.prefix
  else:
    cmake_source = drake.node('CMakeLists.txt').path(absolute = True).dirname()
  cmake = PrometheusCMakeBuilder(cxx_toolkit, srcs, dsts, cmake_vars,
                                 targets = targets,
                                 path_to_cmake_source = cmake_source)
  global cxx_config
  cxx_config = drake.cxx.Config(in_cxx_config)
  cxx_config += protobuf_config
  # libprometheus-cpp's header.
  cxx_config.add_local_include_path('include')
  # prometheus_client_model, a submodule, that contains the protobuf
  # support: metrics.pb.h.
  cxx_config.add_local_include_path('lib/cpp')

# Local Variables:
# mode: python
# End:
